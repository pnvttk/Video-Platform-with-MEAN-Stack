**PART 2**
Guys, this series was made a while ago. You want to "npm install" all of your dependencies. Do not do what I did here and add them to the package.json. That was a mistake to do it that way.

Yeah exactly! So what you should do is go back to your command terminal and run: 
    npm install express (Hit Enter and wait for this to install)
    npm install mongoose (Hit Enter and wait for this to install)
    npm install bcryptjs (Hit Enter and wait for this to install)

and so on and so on for all the dependencies...
Once you're done installing all the dependencies, you will find them all in your package-lock.json file!

**PART 4**
passport.json
    ```
    const JwtStrategy = require('passport-jwt').Strategy;
    const ExtractJwt = require('passport-jwt').ExtractJwt;
    const User = require('../models/user');
    const config = require('../config/database')

    module.exports = function(passport) {
        let opts = {};
        opts.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme('jwt');
        opts.secretOrKey = config.secret;
        passport.use(new JwtStrategy(opts, (jwt_payload, done) => {
            User.getUserById(jwt_payload.data._id, (err, user) => {
                if (err) {
                    return done(err, false);
                }
                if (user) {
                    return done(null, user);
                } else {
                    return done(null, false);
                    // or you could create a new account
                }

            });

        }));
    }
    ```

err : Cannot read property 'passport' of undefined     at SessionStrategy.authenticate
    ---> fix session add this line
    npm install express-session
    app.js
    ``` 
    const session = require("express-session");
    app.use(session({secret: "secret"}))
    ```

error: express-session deprecated
    ---> fix by edit this line
    ``` 
    app.use(session({
        secret: cookie_secret,
        resave: true,
        saveUninitialized: true
    }));
    ```
Error: Expected "payload" to be a plain object. at validate (D:\Y3T1\04_web_programing\mini_project\meanauthapp\node_modules\jsonwebtoken\sign.js:40:11)
    --> fix by edit add {} for user => {user}
    users.js
    ```
                if (isMatch) {
                    const token = jwt.sign({ user }, config.secret, {
                        expiresIn: 3600 // 1 hr
                    })
    ```
Error : Unauthorized in postman from checking jwt token
    --> fix by edit passport.js
    ```
    opts.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme('jwt'); 
    change to jwt_payload.user._id
    ```

**PART 5**
Change Outputpath to ../public
becarful of bootstrap and navbar 
Also for those of you watching in 2020:
The HttpModule for the Angular import is deprecated you should now be using import { HttpClientModule} from '@angular/common/http';
https://angular.io/guide/deprecations

**PART 6**
Err : Property 'name' has no initializer and is not definitely assigned in the constructor.ts(2564)
    --> undefined name!
Err : Parameter 'user' implicitly has an 'any' type.ts
    --> edit to
    user:any
Err : Not all code paths return a value.
    --> add
    return undefined; // what the f is happanning????

**PART  7**
For people doing this in 2021 in auth.service.ts the http stuff changed yet again, now it's:
    import { HttpClient, HttpHeaders } from '@angular/common/http';
    import { map } from "rxjs/operators";

Err : pipe(map((res: any) => res.json));

You also need to go into app.module.ts and import:
import { HttpClientModule } from '@angular/common/http';
then add it to the imports:[] inside @NgModule

install rxjs
    --> npm install rxjs
    --> npm install --save rxjs-compat 

Err : 'map' does not exist on type Observable
    Operator chaining has been transitioned to the use of .pipe() in RXJS v6, you should follow the recommended migration path for RXJS. Additionally, the catch operator has been renamed to catchError.
    REF : https://github.com/webmaxru/pwa-workshop-angular/issues/2
Err : Property 'json' does not exist on type 'Object'
    For future visitors: In the new HttpClient (Angular 4.3+), the response object is JSON by default, so you don't need to do response.json().data anymore. Just use response directly.
Err : Property 'success' does not exist on type 'Object'.
    For anyone getting:
    error TS2339: Property 'success' does not exist on type 'Object'. 
    error TS2339: Property 'msg' does not exist on type 'Object'.
    error TS2339: Property 'user' does not exist on type 'Object'.
    Use  --- >       
    (data as any).success 
    (data as any).msg 
    (data as any).user  
    instead of data.success/data.msg/data.user

**PART 8**
26.08.2021
in case you face outdated materials or undefined objects do the following code!

In auth.service.ts

authenticateUser(user: any): Observable<any> {
    let headers = new HttpHeaders();
    headers.append('Content-Type','application/json');
    return this.http.post<any>('http://localhost:3000/users/authenticate',user);
  }

  storeUserData(token: any, user: any) {
    localStorage.setItem('id_token',token);
    localStorage.setItem('user',JSON.stringify(user));
    this.authToken = token;
    this.user = user;
  }

And in login.component.ts:

this.authService.authenticateUser(user).subscribe(data => {
      if((data as any).success) {
        this.authService.storeUserData((data as any).token,(data as any).user);
        this.flashMessage.show('You are now logged in', {cssClass: 'alert-success', timeout: 5000});
        this.router.navigate(['/dashboard']);
      } else {
        this.flashMessage.show((data as any).msg, {cssClass: 'alert-danger', timeout: 5000});
        this.router.navigate(['/login']);
      }
    });

if getting error on 
    data.success
    data.msg
    data.token
    data.user     -->     property does not exist on type object...

    simply replace as following
    (data as any).msg
    (data as any).token
    (data as any).user
    (data as any).success
this is basically because u r using version 6.x.x or higher...

**PART 9**
Err : user object
    --> Fix
    this.authService.getProfile().subscribe((profile:any) => {
        this.user = profile.user;
        console.log("this"+this.user)
        console.log("profile"+profile.user)
        });
        (err: any) => {
        console.log(err)
        return false;

BEFORE USE UNAUTH_JWT

intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    --> check rxjs version
    npm list rxjs
    npm install rxjs@version

MASSIVE Error
    SHORT WAY ( standalone ):
    ** INSTALL IN THE ANGULAR-SRC !!! IF NOT IT WILL ERROR
    - npm install @auth0/angular-jwt
    

    - import { JwtHelperService } from '@auth0/angular-jwt'; in auth.service.ts file
    -  do not pass it into constructor
    - in loggedIn() function: 
            loggedIn(){
                    this.loadToken();
                    const helper = new JwtHelperService();
                    return helper.isTokenExpired(this.authToken); //False if Token is good, True if not good
            }
    - change authService to public in navbar.component.ts
    - switch around the "!" symbol when calling authService.loggedIn()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    LONGER WAY ( injection ):
    - npm install @auth0/angular-jwt
    ------Changes to auth.service.ts
    To use isTokenExpired, you must type: import { JwtHelperService } from '@auth0/angular-jwt'; at the top of your auth.service.ts file and inject it into the constructor as so: public jwtHelper: JwtHelperService


    And in your loggedIn() function:
            loggedIn(){
                    return this.jwtHelper.isTokenExpired();
            }


    ------Changes to app.module.ts
    You must import the JwtModule as so: import { JwtModule } from '@auth0/angular-jwt';


    And create an export function which retrieves the token for you: 
            export function tokenGetter(){ 
                    return localStorage.getItem("id_token");
            }
    In imports section, add:
            JwtModule.forRoot({
                    config: {
                            tokenGetter: tokenGetter
                    }
            })


    ------- navbar.component.ts
    - inject authService as public into the constructor


    ------- navbar.component.html
    - switch around the "!" symbol when calling authService.loggedIn()

Skip AuthGuard Protected

Error ERROR Error: Uncaught (in promise): NullInjectorError: R3InjectorError(RegisterPageModule)[AccessProviders -> AccessProviders]
    Ref : https://stackoverflow.com/questions/63984156/error-error-uncaught-in-promise-nullinjectorerror-r3injectorerrorregisterp

Error : Can't bind to 'routerLink' since it isn't a known property
    ref : https://stackoverflow.com/questions/42035387/cant-bind-to-routerlink-since-it-isnt-a-known-property

Error : pipe name not found
    ref : https://www.youtube.com/watch?v=maI2u6Sxk9M